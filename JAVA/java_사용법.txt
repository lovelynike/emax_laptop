[Java Install]

C:\Users\Your Name>java -version

Setup for Windows
To install Java on Windows:

    1. Go to "System Properties" (Can be found on Control Panel > System and Security > System > Advanced System Settings)
    2. Click on the "Environment variables" button under the "Advanced" tab
    3. Then, select the "Path" variable in System variables and click on the "Edit" button
    4. Click on the "New" button and add the path where Java is installed, followed by \bin. By default, Java is installed in C:\Program Files\Java\jdk-11.0.1 (If nothing else was specified when you installed it). In that case, You will have to add a new path with: C:\Program Files\Java\jdk-11.0.1\bin
    Then, click "OK", and save the settings
    5. At last, open Command Prompt (cmd.exe) and type java -version to see if Java is running on your machine


--class
    Every line of code that runs in Java must be inside a class. In our example, we named the class Main. A class should always start with an uppercase first letter.
    Note: Java is case-sensitive: "MyClass" and "myclass" has different meaning.
    The name of the java file must match the class name.

--class name which must match the filename
    For now, just remember that every Java program has a class name which must match the filename, and that every program must contain the main() method.

--semicolon
    Note: The curly braces {} marks the beginning and the end of a block of code.
    You should also note that each code statement must end with a semicolon (;).

--variables
    Note: It is recommended to use descriptive names in order to create understandable and maintainable code:
    The general rules for naming variables are:

    Names can contain letters, digits, underscores, and dollar signs
    Names must begin with a letter
    Names should start with a lowercase letter and it cannot contain whitespace
    Names can also begin with $ and _ (but we will not use it in this tutorial)
    Names are case sensitive ("myVar" and "myvar" are different variables)
    Reserved words (like Java keywords, such as int or boolean) cannot be used as names

int랑 double이 가장 많이 사용됨

--Java Logical Operators
    && 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	
    || 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	
    !	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)

--Methods 
    Methods = Functions 같은 말임 
    콜하면 작동함. 파라미터 가능 
    왜쓰냐? 한번 만들어서 여러번 쓸수 잇음.
    매소드는 클래스안에 선언해야함.

    static void 함수명(){
        // static은 매서드가 Main 클래스에 종속되어 있다는 것이고,, Main 클래스의 object가 아니라는 뜻. 
        // void는 리턴 값이 없다는 뜻.
    }

--Parameters and Arguments
    When a parameter is passed to the method, it is called an argument. So, from the example above: fname is a parameter, while Liam, Jenny and Anja are arguments.
    Note that when you are working with multiple parameters, the method call must have the same number of arguments as there are parameters, and the arguments must be passed in the same order.

-- Return Values 
    void 대신 data type을 적어라. 그리고 return을 써라. 

--Java - What is OOP?

    OOP stands for Object-Oriented Programming.

    Procedural programming is about writing procedures or methods that perform operations on the data, while object-oriented programming is about creating objects that contain both data and methods.

    Object-oriented programming has several advantages over procedural programming:

    OOP is faster and easier to execute
    OOP provides a clear structure for the programs
    OOP helps to keep the Java code DRY "Don't Repeat Yourself", and makes the code easier to maintain, modify and debug
    OOP makes it possible to create full reusable applications with less code and shorter development time
    Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should extract out the codes that are common for the application, and place them at a single place and reuse them instead of repeating it.

--Java - What are Classes and Objects?

    Classes and objects are the two main aspects of object-oriented programming.
    So, a class is a template for objects, and an object is an instance of a class.
    When the individual objects are created, they inherit all the variables and methods from the class.
    Java is an object-oriented programming language.

--Remember from the Java Syntax chapter that a class should always start with an uppercase first letter, and that the name of the java file should match the class name.

--Java Class Attributes
    Another term for class attributes is fields.

--Accessing Attributes
     by using the dot syntax (.):
--Modify Attributes
    myObj.x = 40;
    If you don't want the ability to override existing values, declare the attribute as final:


--Static vs. Public
    we created a static method, which means that it can be accessed without creating an object of the class, unlike public, which can only be accessed by objects:

-- Java Constructors
    A constructor in Java is a special method that is used to initialize objects. The constructor is called when an object of a class is created. It can be used to set initial values for object attributes:
    Note that the constructor name must match the class name, and it cannot have a return type (like void).
    Also note that the constructor is called when the object is created.
    All classes have constructors by default: if you do not create a class constructor yourself, Java creates one for you. However, then you are not able to set initial values for object attributes.

-- Java Modifiers (eg. public class Main)
    The public keyword is an access modifier, meaning that it is used to set the access level for classes, attributes, methods and constructors.

    We divide modifiers into two groups:

    Access Modifiers - controls the access level
    Non-Access Modifiers - do not control access level, but provides other functionality

    Access Modifiers
    For classes, you can use either public or default:

    Non-Access Modifiers
    For classes, you can use either final or abstract:

-- Java Encapsulation

    Encapsulation
    The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. To achieve this, you must:

    - declare class variables/attributes as private
    - provide public get and set methods to access and update the value of a private variable

    < Why Encapsulation? >
    - Better control of class attributes and methods
    - Class attributes can be made read-only (if you only use the get method), or write-only (if you only use the set method)
    - Flexible: the programmer can change one part of the code without affecting other parts
    - Increased security of data

--Java Packages

    Java Packages & API
    A package in Java is used to group related classes. Think of it as a folder in a file directory. We use packages to avoid name conflicts, and to write a better maintainable code. Packages are divided into two categories:

    - Built-in Packages (packages from the Java API)
    - User-defined Packages (create your own packages)
